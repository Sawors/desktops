#!/bin/env python3

from os import system
from os import path
import os
from sys import argv
from time import time
import stat
import subprocess
from encodings import utf_8
import shutil
# external
import yaml

class RunMode:
    DETECT = "detect"
    APPLY = "apply"
    TEST = "test"
    CREATE = "create"
    CONFIG = "config"

    help_messages = {
        DETECT: """Desktops: Detection mode
This mode detects the current hardware used, compares it with the found hardare configs, and writes the result to disk.

    usage: desktops detect [OPTIONS]

    optional args:
    -m, --exact-match  the config must exacly match the hardware, otherwise nothing is done
    -r, --no-write     do not write the found config to disk
    -v, --verbose      print additional runtime information
    """,
        APPLY: """Desktops: Application mode
This mode applies the launch scripts of the found hardware configuration. There is two phases for the application sequence: root and user phases.

    usage: desktops apply [OPTIONS]
    
    optional args:
    -r, --root                set the root script as the launch script to use
    -t=<type>, --type=<type>  pass <type> to the launch script as its first argument
    -v, --verbose             print additional runtime information
    """,
        TEST: """Desktops: Benchmarking mode
Usefull if you need to know how much time fetching takes, or where are located hardware configs and launch scripts.

    usage: desktops test [OPTIONS]

    optinal args:
    -b, --benchmark  enable benchmark
    -c, --configs    enable configs listing
    -s, --scripts    enable scripts listing

    note: By default benchmark, configs and scripts are enabled. 
    Specifying one of them will disable the other unless explicitly enabled.
    """,
        CREATE: """Desktops: Creation mode
This mode allows you to automatically create a hardware configuration from your current hardware.

    usage: desktops create <configname> [OPTIONS]

    required args:
    <configname>              the name of the config to be created 
    
    optional args:
    -n=<name>, --name=<name>  tell explicitly the name of the config (same as desktops create <name>)

    note: If you are using -n= you can ommit specifying the config name as second argument
    """,
        CONFIG: """Desktops: Config management mode
    This mode is used to list currently discovered configs or get/set the currently used one.
    
    usage: desktops config <subcommand>

    subcommand list:
    current           get the currently used config
    set <config>      set the currently used config
    list              list all the currently found configs
    match [config]    match all the configs, or a specific one with the currently detected hardware
    """,
    # default general help message
    "": """
    Please specify an action.
    Usage :
        desktops <ACTION> [OPTIONS]

    Possible actions are :
        detect
        apply
        create
        test
        
    to get help on an action, run :
        desktops <ACTION> --help""",

    }


# general
ENCODING=utf_8.getregentry().name
ROOT_DIR_NAME = "desktops"
ROOT_DIR = f"/etc/{ROOT_DIR_NAME}"
HARDWARE_CONFIG_DIR_NAME = "hardware"
HARDWARE_CONFIG_DIR = f"{ROOT_DIR}/{HARDWARE_CONFIG_DIR_NAME}"
SHARED_CONFIG_DIR_NAME = ".shared"
CURRENT_CONFIG_FILE = f"{ROOT_DIR}/desktops_current"
UNKNOWN_CONFIG_NAME = "unknown_config"
# ideally sorted in order, from quickest to slowest
FULL_FETCH_CONTENT = [
                        "board",
                        "cpu",
                        "memory",
                        "gpu",
                        "display"
                    ]
# partial fetch initial content
PARTIAL_FETCH_CONTENT = ["board","cpu","memory"]

# arguments
VERBOSE = "--verbose" in argv or "-v" in argv

# colors
C_ORANGE = "\033[93m"
C_CYAN = "\033[36m"
C_GREEN = "\033[92m"
C_RED = "\033[31m"
C_BLUE = "\033[94m"
C_MAGENTA = "\033[95m"
C_GRAY = "\033[90m"
C_RESET = "\033[39m"

class HardwareConfig:
    # LOCATIONS
    CONFIG_DIR_NAME="desktops"
    GENERAL_CONFIG_DIR=f"/etc/{ROOT_DIR_NAME}/{HARDWARE_CONFIG_DIR}"
    USER_CONFIG_DIR=path.expanduser(f"~/.config/{CONFIG_DIR_NAME}/{HARDWARE_CONFIG_DIR_NAME}")
    COMPONENTS_SCRIPT_DIR_NAME = "scripts"
    COMPONENTS_SCRIPT_IGNORED_CHAR = "_"
    # FILE IDENTIFIERS
    class FileName:
        COMPONENTS = "components.yml"
        SCRIPT_ROOT = "root-launch.sh"
        SCRIPT_USER = "user-launch.sh"

    def get_user_config_dir(self) -> str:
        return f"{HardwareConfig.USER_CONFIG_DIR}/{self.name}"

    def get_general_config_dir(self) -> str:
        return f"{HARDWARE_CONFIG_DIR}/{self.name}"

    def get_component_file(self) -> str:
        return f"{self.get_general_config_dir()}/{HardwareConfig.FileName.COMPONENTS}"

    def _get_file(self, filepath:str, identifier:str) -> str:
        if path.isdir(filepath):
            for file in os.listdir(filepath):
                if file == identifier:
                    return f"{filepath}/{file}"
        return None

    def _load_user_scripts(self) -> list:
        conf=list()
        # gen_script = self._get_file(self.get_general_config_dir(), HardwareConfig.FileName.SCRIPT_USER)
        comp_dir = f"{self.get_user_config_dir()}{os.sep}{HardwareConfig.COMPONENTS_SCRIPT_DIR_NAME}"
        if os.path.isdir(comp_dir):
            for f in os.listdir(comp_dir):
                fullpath = f"{comp_dir}{os.sep}{f}"
                if not f.startswith(HardwareConfig.COMPONENTS_SCRIPT_IGNORED_CHAR) and os.path.isfile(fullpath):
                    conf.append(fullpath)
        conf = sorted(conf)
        return conf

    def _load_root_scripts(self) -> list:
        conf=list()
        gen_script = self._get_file(self.get_general_config_dir(), HardwareConfig.FileName.SCRIPT_ROOT)
        if not gen_script is None:
            conf.append(gen_script)
        return conf

    @staticmethod
    def standardize_data(comps: dict) -> dict:
        data = {}
        for k,v in comps.items():
            key = k.lower()
            if key == "memory" and "/" in v and "(" in v:
                data[key] = v[v.find("/")+2:v.find("(")-1]
            elif key == "cpu" and "@" in v:
                data[key] = v[0:v.find("@")-1]
            else:
                data[key] = v
        return data

    @staticmethod
    def deserialize_components(filepath:str) -> dict:
        try:
            with open(filepath, "r", encoding=ENCODING) as inputstream:
                return HardwareConfig.standardize_data(yaml.safe_load(inputstream))
        except Exception as excp:
            raise FileNotFoundError(f"config does not exist at {filepath}") from excp

    def _load_components(self) -> dict:
        return HardwareConfig.deserialize_components(self.get_component_file())

    def load_scripts(self):
        self.user_scripts = self._load_user_scripts()
        self.root_scripts = self._load_root_scripts()
        self.are_scripts_loaded=True

    def exists(self) -> bool:
        return path.isfile(self.get_component_file())

    def __init__(self, name:str, load_scripts=True):
        self.name = name
        self.user_scripts = list()
        self.root_scripts = list()
        self.are_scripts_loaded=False
        if load_scripts:
            self.load_scripts()
        try:
            self.components = self._load_components()
        except Exception as _:
            self.components = {}

    def match_map(self, component_list:dict) -> dict:
        matching = {}
        for k,v in self.components.items():
            matching[k] = k in component_list and str(component_list[k]).lower() == str(v).lower()
        return matching


    def match(self, component_list:dict, ignore_conflict=True) -> int:
        """
        returns the number of matching fields between the fetched components and the ones defines by the config
        """
        if component_list is None or len(component_list) == 0:
            return 0
        if self.components == component_list:
            return len(component_list)

        matching = 0

        for k,v in component_list.items():
            if k in self.components:
                if str(v).lower().strip() == str(self.components[k]).lower().strip():
                    matching += 1
                elif not ignore_conflict:
                    return 0
        return matching

    @staticmethod
    def UnknownConfig():
        return HardwareConfig(UNKNOWN_CONFIG_NAME, load_scripts=False)

def get_shared_config_dir() -> str:
    return path.expanduser(f"~/.config/{HardwareConfig.CONFIG_DIR_NAME}/{SHARED_CONFIG_DIR_NAME}")

def save_config(config:HardwareConfig):
    # not in the HardwareConfig class to prevent
    # abuse in saving configs. This operation
    # should be done very rarely (or when using)
    # desktops create
    if not path.isdir(config.get_general_config_dir()):
        os.makedirs(config.get_general_config_dir())
    with open(config.get_component_file(), "w", encoding=ENCODING) as output:
        output.write(yaml.safe_dump(config.components))


def print_verbose(text: str, verbose=True):
    if verbose:
        print(text)

def get_current_config_name() -> str:
    if not path.isfile(CURRENT_CONFIG_FILE):
        raise FileNotFoundError("Current config is not set yet.")
    conf_name = None
    with open(CURRENT_CONFIG_FILE, "r", encoding=ENCODING) as file_input:
        file_input.seek(0)
        conf_name = file_input.readline().strip()
    return conf_name
def get_current_config() -> HardwareConfig:
    conf_name = get_current_config_name()
    conf = HardwareConfig(conf_name)
    if conf.exists():
        return conf
    return None

def set_current_config(config:HardwareConfig):
    if not config.exists():
        raise FileNotFoundError("Cannot set a non-existing config as the currently used one.")
    with open(CURRENT_CONFIG_FILE, "w", encoding=ENCODING) as file_output:
        file_output.write(f"{config.name}\n")
        try:
            os.chmod(CURRENT_CONFIG_FILE, stat.S_IRUSR | stat.S_IWUSR |  stat.S_IROTH |  stat.S_IWOTH | stat.S_IRGRP | stat.S_IWGRP)
        except PermissionError:
            print("Config set but file permissions were not allowed to be modified.")

def fetch_components(components: list) -> dict:
    output = ""
    component_str = ":".join(components)
    args = [
                "fastfetch",
                "-l none",
                "--pipe",
                "-s",
                component_str,
                "--multithreading",
                "--CPU-format '{1}'",
                "--GPU-format '{1} {2}'",
                "--Memory-format '{2}'",
                "--Display-format '{1}x{2}'",
                "--Board-format '{1}'",
            ]
    try:
        output = subprocess.check_output(
            " ".join(args),
            shell=True
            ).decode(ENCODING)
    except subprocess.CalledProcessError as er:
        print("an error occured when fetching the data !")
        print("no config found")
        raise er

    fetched = output.strip().splitlines()

    datamap = {}
    monitor_amount = 0
    for entry in fetched :
        if entry.startswith("Display"):
            # do not count monitors with a height smaller than 1080 pixels (to avoid detecting fake monitors)
            # WARNING: THIS COULD LEAD TO UNWANTED BEHAVIOURS !
            duo = entry.split(":")[1].split("x")
            height = int(duo[0])
            if height < 1080:
                continue
            monitor_amount+=1
        else:
            duo = entry.split(":")
            data = duo[1].strip() if len(duo) > 1 else ""
            datamap[str(duo[0]).lower()] = data
    if "Display" in components:
        datamap["monitors"] = str(monitor_amount)

    return HardwareConfig.standardize_data(datamap)

def load_configs() -> list:
    """
    Returns a list of found configs in the general config directory.
    The configs scripts are not loaded when generated by this method!
    (/etc/desktops/hardware)
    """
    user_configs = []
    if os.path.isdir(HARDWARE_CONFIG_DIR):
        identifier = HardwareConfig.FileName.COMPONENTS
        for base, _, files in os.walk(HARDWARE_CONFIG_DIR):
            if identifier in files:
                config_name = base[base.rfind("/")+1:]
                hw_config = HardwareConfig(config_name,load_scripts=False)
                user_configs.append(hw_config)
    return user_configs

def sort_config(config:HardwareConfig, match_result:int) -> float:
    """
    Returns a score to rank the configs from the least probable (0) to
    the most probable (>=1).
    """
    # TODO : make this cleaner and more predictable
    max_comp_amount = len(FULL_FETCH_CONTENT)
    config_comps = len(config.components)
    absolute_score = match_result/max(max_comp_amount,1)/2
    relative_score = match_result/max(config_comps,1)/2
    return absolute_score+relative_score

def get_sorted_config_list(config_list:list, fetch_content:dict) -> list:
    return sorted(
        [(k,sort_config(k,k.match(fetch_content))) for k in config_list],
        key = lambda k: k[1],
        reverse = True
    )

########################################
##                                    ##
##               DETECT               ##
##                                    ##
########################################
def detect(verbose=False, exact_match=False) -> HardwareConfig:
    found_configs = load_configs()
    print_verbose(f"found {len(found_configs)} hardware configs")

    start_time = time()
    fetch_content = fetch_components(PARTIAL_FETCH_CONTENT)
    if verbose:
        print_verbose(f"initial fetch done in {round((time()-start_time)*1000)}ms")

    unused_components = [c for c in FULL_FETCH_CONTENT if c not in PARTIAL_FETCH_CONTENT]

    refetch_amount = 0
    
    used_config = HardwareConfig.UnknownConfig()

    for i in unused_components:
        if len(i) > 0:
            fetch_content.update(fetch_components([i]))
            refetch_amount += 1
        #matchmap = {}
        #for conf in found_configs:
        #    matchmap[conf] = sort_config(conf,conf.match(fetch_content))
        #max_matches = max(matchmap.values()) if len(matchmap) > 0 else 0

        matching = get_sorted_config_list(found_configs,fetch_content)
        #for k,v in matchmap.items():
        #    if v == max_matches :
        #        matching.append(k)
        if len(matching) == 0:
            print_verbose("No config found.")
            return used_config
        best_match = matching[0][0]
        best_match_score = matching[0][1]
        if best_match_score == 1:
            used_config = best_match
            print_verbose(f"config [{used_config.name}] exactly matched")
            break
        if not exact_match and best_match_score > 0:
            used_config = best_match
            print_verbose(f"found config [{used_config.name}] with {used_config.match(fetch_content)} matches")
            break

    if VERBOSE:
        total_time = round((time()-start_time)*1000)
        print_verbose(f"config matching done with {refetch_amount} additionnal fetch{'es' if refetch_amount > 1 else ''}")
        print_verbose(f"complete config detection done in {total_time}ms")

    return used_config

########################################
##                                    ##
##                APPLY               ##
##                                    ##
########################################
def apply(current_config:HardwareConfig, passed_arguments="", is_root=False):
    # the config will be applied as the current user. For any operation requiring root privileges please edit /etc/sddm/Xsetup.

    def ask_validation():
        sure = input("Are you sure this is what you want to do ? (y/N): ").lower() in ["y","yes"]
        if not sure:
            print("User cancelation, aborting sequence.")
            return

    if is_root and os.geteuid() != 0:
        print("Applying root config as a non-root user, this is not an intended usage.")
        ask_validation()
    elif (not is_root) and os.geteuid() == 0:
        print("Root user detected, automatically switching to root mode (--root)")
        is_root = True

    if is_root:
        print("applying root startup scripts")
    else:
        print(f"applying user startup scripts for user [{os.getlogin()}]")

    # general config launch script

    if current_config is None or not current_config.exists():
        raise FileNotFoundError("No config found!")

    # user-specific launch script
    successful_scripts = 0
    failed_scripts = 0

    if is_root:
        for s in current_config.root_scripts:
            try:
                if not s is None and len(s) > 0:
                    system(f"{s} {passed_arguments}")
                    successful_scripts += 1
            except Exception:
                print(f"Failed to run {s} !")
                failed_scripts += 1
    else:
        user_scp = current_config.user_scripts

        shutil.rmtree(get_shared_config_dir())
        os.mkdir(get_shared_config_dir())
        
        for s in user_scp:
            try:
                if not s is None and len(s) > 0:
                    system(f"{s} {passed_arguments}")
                    successful_scripts += 1
            except Exception:
                print(f"Permissions to run {s} denied !")
                if is_root:
                    print("Please run this program with root privileges when using --root or -r !")
                failed_scripts += 1
        try:
            subprocess.call(
                [
                    "notify-send",
                    "Desktops",
                    f"Config [{current_config.name}] {'applied' if successful_scripts > 0 else 'FAILED TO BE APPLIED'} !"
                ]
            )
        except Exception:
            print("notification could not be sent! THIS IS NOT AN ERROR BUT A BAD IMPLEMENTATION")
    print(f"Launch script execution done ({successful_scripts}/{successful_scripts+failed_scripts})")

def benchmark():
    comp_set = FULL_FETCH_CONTENT
    fetch_components(comp_set)
    load_configs()
    fetch_times = {}
    fetch_result = {}
    print("Split fetch timings:")
    for identifier in comp_set:
        base_time = time()
        try:
            output = subprocess.check_output(f"fastfetch --pipe -s {identifier} --multithreading", shell=True).decode(ENCODING)
            fetch_times[identifier] = round((time()-base_time)*1000)
            fetch_result[identifier] = output
        except subprocess.CalledProcessError:
            print("an error occured when fetching the data !")

    total_time = sum(fetch_times.values())
    for k,v in sorted(fetch_times.items(), key=lambda k:k[1], reverse=False):
        print(f"    - fetched {k} in {v}ms ({round(100*v/total_time)}%)")
    print(f"{C_GREEN}==> all fetches took {C_CYAN}{total_time}ms{C_GREEN} in total{C_RESET}")
    print(f"{C_BLUE}\nStarting merged fetch benchmark...{C_RESET}")
    start_time = time()
    merged_list = fetch_components(FULL_FETCH_CONTENT)
    merged_fetch_time = round((time()-start_time)*1000)
    print(f"{C_GREEN}==> merged fetch took {C_CYAN}{merged_fetch_time}ms{C_RESET}")

    print("\nHardware: ")
    for category, comp in merged_list.items():
        print(f"    - {category} : {comp}")

########################################
##                                    ##
##                 TEST               ##
##                                    ##
########################################
def test(benchmark_fetch = True, list_configs = True, list_scripts = True):
    hardware = fetch_components(FULL_FETCH_CONTENT)
    current = get_current_config()
    configs = {}

    if benchmark_fetch:
        print(f"{C_BLUE}Starting benchmarking sequence...{C_RESET}")
        benchmark()

    if list_configs:
        print(f"{C_BLUE}\nListing hardware configs...{C_RESET}")

        for c in load_configs():
            configs[c] = c.match(hardware)

        for conf, matches in sorted(configs.items(), key=lambda k:sort_config(k[0],k[1]), reverse=True):
            c1 = C_RESET
            c2 = C_RESET
            if conf.name == current.name:
                c1 = C_MAGENTA
                c2 = C_ORANGE
            elif matches < 1:
                c1 = C_GRAY
                c2 = C_GRAY
            print(f"    {c1}- {c2}{conf.name}{c1}: {conf.get_component_file()}")
            print(f"      {c2}matches: {matches}/{len(conf.components)} : {sort_config(conf,matches)}{C_RESET}")
        print(f"{C_GREEN}==> {C_CYAN}{len(configs)} config{'s' if len(configs) > 1 else ''}{C_GREEN} found{C_RESET}")

        print(f"{C_BLUE}\nStarting detection benchmark...{C_RESET}")
        start_time = time()
        detect()
        final_time = round((time()-start_time)*1000)
        print(f"{C_GREEN}==> partial detection took {C_CYAN}{final_time}ms{C_RESET}")

    if list_scripts:
        print(f"{C_BLUE}\nListing startup scripts...{C_RESET}")
        if len(configs) == 0:
            configs = load_configs()

        is_root = os.geteuid() == 0

        for c in configs:
            c.load_scripts()
            c1 = C_GRAY
            c2 = C_RESET
            is_current = c.name == current.name

            if is_current:
                c1 = C_MAGENTA
                c2 = C_ORANGE

            print(C_RESET)
            print(f"    {c1}[{c2}{c.name}{c1}]:")
            print(f"      {c2 if is_root else c1}root{c1}:")
            for index, sc in enumerate(c.root_scripts):
                print(f"        {index+1}. {sc}")
            print(f"      {c2 if not is_root else c1}user{c1}:")
            for index, sc in enumerate(c.user_scripts):
                print(f"        {index+1}. {sc}")

########################################
##                                    ##
##               CREATE               ##
##                                    ##
########################################
def create(config_name:str):
    datamap = fetch_components(FULL_FETCH_CONTENT)
    config_path = f"{HARDWARE_CONFIG_DIR}/{config_name}"
    if path.exists(config_path):
        print(f"Config [{config_name}] already exists!\nAborting creation")
        return

    try:
        os.makedirs(config_path)
    except Exception as e:
        print(f"Config directory creation failed, aborting operation ({repr(e)})")
        return

    print(f"config will be created at {config_path}/")
    print("this hardware will be used for config:")
    for k,v in datamap.items():
        print(f"    - {k}: {v}")
    # write config
    try:
        with open(f"{config_path}/{HardwareConfig.FileName.COMPONENTS}", "w", encoding=ENCODING) as target_file:
            yaml.safe_dump(data=datamap,stream=target_file)
        with open(f"{config_path}/{HardwareConfig.FileName.SCRIPT_ROOT}", "w", encoding=ENCODING) as target_file:
            target_file.write("# root startup script goes here")
            os.chmod(target_file.name, stat.S_IXUSR | stat.S_IRUSR | stat.S_IWUSR |  stat.S_IROTH | stat.S_IRGRP)
        with open(f"{config_path}/{HardwareConfig.FileName.SCRIPT_USER}", "w", encoding=ENCODING) as target_file:
            target_file.write("# user startup script goes here")
            os.chmod(target_file.name, stat.S_IXUSR | stat.S_IRUSR | stat.S_IWUSR |  stat.S_IROTH | stat.S_IRGRP)
    except Exception as e:
        print(f"Config file creation failed, aborting operation ({repr(e)})")
        try:
            shutil.rmtree(config_path)
        except Exception:
            print("Config cleanup failed")


##################################################
#                                                #
#  End of definitions, beginning of script flow  #
#                                                #
##################################################

def main(args:list) -> int:

    mode = None

    if not (len(args) < 1 or args[0].startswith("-") or (len(args) >= 2 and (args[1] == "--help" or args[1] == "-h"))):
        mode = args[0]


    if not path.isfile(CURRENT_CONFIG_FILE):
        try:
            open(CURRENT_CONFIG_FILE, "w").close()
        except:
            print(f"Could not open config save file, please change permissions to file {CURRENT_CONFIG_FILE}.")
            return 1

    match(mode):
        case RunMode.DETECT:
            try:
                subprocess.run("fastfetch -v", shell=True, capture_output=True, check=True)
            except subprocess.CalledProcessError:
                print("ERROR : fastfetch not found! please ensure fastfetch is present and available.\nAborting detection!")
                os.sys.exit()
            print("Detecting hardware configuration...")
            try:
                found_config = detect(exact_match="--exact-match" in args or "-m" in args)
            except Exception:
                found_config = None
            if found_config is None:
                found_config = HardwareConfig.UnknownConfig()
                print(f"No config found! Using {found_config.name} instead.")
            print(f"using config [{found_config.name}]")
            if not ("--no-write" in args or "-r" in args):
                set_current_config(found_config)

        case RunMode.TEST:
            if len(args) == 1:
                test()
            else:
                test(
                    benchmark_fetch = "--benchmark" in args or "-b" in args,
                    list_configs = "--configs" in args or "-c" in args,
                    list_scripts = "--scripts" in args or "-s" in args,
                )

        case RunMode.APPLY:
            try:
                current_config = get_current_config()
            except FileNotFoundError:
                main([RunMode.DETECT])
                try:
                    current_config = get_current_config()
                    if not current_config.exists():
                        print("Config detection failed, please try again as root!")
                        return 1
                except Exception:
                    print("Config detection failed, please try again as root!")
                    return 1
            except PermissionError:
                print(f"Not enough permissions to access latest config. Please grant read/write permission for the file {CURRENT_CONFIG_FILE}")
            print("Launching startup scripts...")
            passed_arguments = " ".join(args[1:len(args)])
            for t in args[1:len(args)]:
                if t.startswith("--type=") or t.startswith("-t="):
                    passed_arguments = t[t.find("=")+1:]
                    break

            is_root = "--root" in args or "-r" in args
            apply(current_config,passed_arguments=passed_arguments,is_root=is_root)

        case RunMode.CREATE:
            name = ""
            for a in args:
                if a.startswith("--name=") or a.startswith("-n="):
                    name = a[a.index("=")+1:len(a)]
                    break
            if len(name) < 1 and len(args) >= 2 and len(args[1]) > 0 and not args[1].startswith("-"):
                name = args[1]
            if len(name) > 0:
                print(f"Creating config [{name}]...")
                create(name)
                print("Config creation done!")
            else:
                print("Please input a name for the config, either using --name=<name> or by putting it as the argument after \"create\"")

        case RunMode.CONFIG:
            subcommand = args[1] if len(args) >= 2 else ""
            config_name = args[2] if len(args) >= 3 else ""
            match subcommand:
                case "shared":
                    print(get_shared_config_dir())
                    return 0
                case "set":
                    if len(config_name) < 1:
                        print("Please provide a config to set")
                        return 1
                    config = HardwareConfig(config_name)
                    if not config.exists():
                        print("The config provided does not exist")
                        return 1
                    set_current_config(config)
                    print(f"Config set to {config.name}")
                case "get" | "current":
                    config = get_current_config()
                    print(config.name, end="")
                case "prop" | "property":
                    config = get_current_config()
                    if len(config_name) < 1:
                        print("Please specify a property to get")
                        return 0
                    match config_name:
                        case "root":
                            print(str(config.get_general_config_dir()),end="")
                        case "userconfig":
                            print(config.get_user_config_dir(),end="")
                        case "components":
                            print(f"{config.get_user_config_dir()}{os.sep}{HardwareConfig.COMPONENTS_SCRIPT_DIR_NAME}")
                case "list":
                    print("Discovered configs:")
                    for config in load_configs():
                        print(f"  {C_CYAN}{config.name}")
                case "match":
                    hardware = fetch_components(FULL_FETCH_CONTENT)
                    def get_match_print(config:HardwareConfig) -> str:
                        msg = f"  {C_MAGENTA}{config.name}{C_RESET}\n"
                        match_map = config.match_map(hardware)
                        max_pad = len(max(match_map.keys() if len(match_map) > 0 else [""]))
                        for comp, state in match_map.items():
                            comp_name = config.components[comp]
                            padding = " "*(max_pad-len(comp))
                            hardware_str = (
                                f"{C_GREEN}{state} ({comp_name})"
                                #{C_GREEN if state else C_RED}{state} ({comp_name})
                            ) if state else (
                                f"{C_RED}{state} ({comp_name}) -> {C_ORANGE}{hardware.get(comp,'-')}"
                            )
                            msg += f"    {comp}:{padding} {hardware_str}{C_RESET}\n"
                        return msg
                    config = HardwareConfig(config_name)
                    match_list = [config] if config.exists() else load_configs()
                    for c in match_list:
                        print(get_match_print(c))
                case _:
                    print(RunMode.help_messages[RunMode.CONFIG])

        case _:
            old = get_current_config_name()
            dt = detect()
            print(f"\n    Current config is [{old}]")
            print(f"    Detected config is [{dt.name}]")
            print(RunMode.help_messages.get(args[0] if len(args) > 1 else "",""))
            return 0


if __name__ == "__main__":
    # make sure at least unknown_config exists
    save_config(HardwareConfig.UnknownConfig())
    EXIT_CODE = main(os.sys.argv[1:len(argv)])
    os.sys.exit(EXIT_CODE)
