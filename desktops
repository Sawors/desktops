#!/bin/env python3
from os import system
from os import path
import os
from sys import argv
from time import time
import stat
import subprocess
import glob
import yaml
import tempfile
import shutil

# TODO 
#   - [ ] add program config support
#   - [~] create README
#   - [X] add to git
#

mode = argv[1]
detectMode = "detect"
applyMode = "apply"
testMode = "test"
createMode = "create"

def printHelpMessage(single_mode=True):
    helpDetect = """Desktops : Detection mode
This mode detects the current hardware used, compares it with the found hardare configs, and writes the result to disk.

    usage: desktops detect [OPTIONS]

    optional args:
     -m, --exact-match  the config must exacly match the hardware, otherwise nothing is done
     -p, --partial      fetch only an optimised section of the hardware
     -r, --no-write     do not write the found config to disk
     -v, --verbose      print additional runtime information
    """

    helpApply = """Desktops : Application mode
This mode applies the launch scripts of the found hardware configuration. There is two phases for the application sequence: root and user phases.

    usage: desktops apply [OPTIONS]
    
    optional args:
     -r, --root                set the root script as the launch script to use
     -t=<type>, --type=<type>  pass <type> to the launch script as its first argument
     -v, --verbose             print additional runtime information
    """

    helpTest = """Desktops : Test mode
Benchmarking mode. Usefull if you need to know how much time fetching takes, or where are located hardware configs and launch scripts.

    usage : desktops test [OPTIONS]

    optinal args:
     -b, --benchmark  enable benchmark
     -c, --configs    enable configs listing
     -s, --scripts    enable scripts listing

     note: By default benchmark, configs and scripts are enabled. 
     Specifying one of them will disable the other unless explicitly enabled.
    """

    helpCreate = """Desktops : creation mode
This mode allows you to automatically create a hardware configuration from your current hardware.

    usage: desktops create <configname> [OPTIONS]

    required args:
    <configname>              the name of the config to be created 
    
    optional args:
    -n=<name>, --name=<name>  tell explicitly the name of the config (same as desktops create <name>)

    note: If you are using -n= you can ommit specifying the config name as second argument
    """

    mergedHelp = f"""
DETECT MODE : {helpDetect}

APPLY MODE : {helpApply}

CREATE MODE : {helpCreate}

TEST MODE : {helpTest}"""

    if single_mode:
        if mode == detectMode:
            print(helpDetect)  
        
        elif mode == applyMode:
            print(helpApply)  
        
        elif mode == testMode:
            print(helpTest)  
        
        elif mode == createMode:
            print(helpCreate)  
        else :
            print(mergedHelp)
    else:
        print(mergedHelp)
    

if "-h" in argv or "--help" in argv:
    if len(argv) > 2:
        printHelpMessage()
    else:
        print("""Desktops
    usage: desktops <mode>

    Available modes:
        detect
        apply
        create
        test

     to obtain help on a specific mode, use: desktops <mode> --help""")
    exit()

# general
root = "/etc/desktops"
computers = "hardware"
defaultHardwareLocation = f"/usr/share/desktops/{computers}"
hardwareLocations = [defaultHardwareLocation, f"{root}/{computers}"]
currentUsedConfig = f"{tempfile.gettempdir()}/desktops_current"
configFormat = "components.yml"
unknownConfig = f"{defaultHardwareLocation}/unknown_config"
displayIdentifier = "Display"
memoryIdentifier = "memory"
cpuIdentifier = "cpu"
rootScriptIdentifier = "root-launch.sh"
userScriptIdentifier = "user-launch.sh"
userConfigLocation = f".config/desktops/{computers}"
# ideally sorted in order, from quickest to slowest
fetchComponents = ["Board","CPU","Memory","GPU","Display"]
# partial fetch
partialFetchComponents = ["Board","CPU","Memory"]

# arguments
EXACT_MATCH = "--exact-match" in argv or "-m" in argv
PARTIAL_FETCH = "--partial" in argv or "-p" in argv
WRITE_CONFIG = not ("--no-write" in argv or "-r" in argv)
VERBOSE = "--verbose" in argv or "-v" in argv

# colors
c_orange = "\033[93m"
c_green = "\033[92m"
c_blue = "\033[94m"
c_default = "\033[39m"


# takes raw data, and attempts to make it standardized.
# Data should be split with one component per key (and monitor amount pre-computed)
# this methods DOES NO ALTER THE BASE COLLECTION, but it does clone it, thus increasing memory footprint
# NOTE : this method works for fast fetch only
# TODO : move this to the fastfetch implementation
def standardizeData(rawData: dict) -> dict:
    data = rawData.copy()
    for rawKey in rawData.keys():
        value = str(rawData[rawKey])
        key = rawKey.lower()

        if key == memoryIdentifier and "/" in value and "(" in value:
            value = value[value.find("/")+2:value.find("(")-1]
        elif key == cpuIdentifier and "@" in value:
            value = value[0:value.find("@")-1]
            
        data[key] = value
    return data


def trimConfigName(configPath:str) -> str:
    trimmed = str(configPath)
    if f"/{configFormat}" in trimmed.lower():
        trimmed = trimmed[0:trimmed.rfind(f"/{configFormat}")]
    if "/" in trimmed:
        trimmed = trimmed[trimmed.rfind("/")+1:len(trimmed)]

    return trimmed

def printVerbose(text: str):
    if VERBOSE: print(text)

def writeConfig(config_dir: str):
    if not WRITE_CONFIG: 
        printVerbose("read only mode, config will not be written to disk")
        return
    baseDir = config_dir if (path.isdir(config_dir) or not path.exists(config_dir)) else path.dirname(config_dir)
    if not path.isdir(baseDir): os.makedirs(baseDir)

    configName = trimConfigName(baseDir)

    try:
        with open(currentUsedConfig, "w") as current:
            current.write(f"{configName}\n{baseDir}\n")
            os.chmod(current.name, stat.S_IRUSR | stat.S_IWUSR |  stat.S_IROTH |  stat.S_IWOTH | stat.S_IRGRP | stat.S_IWGRP)
    except PermissionError as p:
        print(f"[!] Could not write config to disk, permission denied!")


def loadComponents(components: list) -> dict:
    output = ""
    componentStr = ""
    for c in components:
        componentStr += f"{c}:"
    componentStr = componentStr[0:len(componentStr)-1]
    
    try:
        output = subprocess.check_output(f"fastfetch --pipe -s {componentStr} --multithreading", shell=True).decode("UTF-8")
    except subprocess.CalledProcessError :
        print("an error occured when fetching the data !")
        print("no config found")
        writeConfig(unknownConfig)
        
    fetched = output.strip().splitlines()

    dataMap = {}
    monitorAmount = 0

    for entry in fetched :
        if entry.startswith(displayIdentifier):
            # do not count monitors with a height smaller than 1080 pixels (to avoid detecting fake monitors)
            if(int(entry.split("x")[1][0:4]) < 1080):
                continue
            monitorAmount+=1
        else:
            duo = entry.split(":")
            key = str(duo[0])
            data = duo[1].strip()
                
            dataMap[str(duo[0]).lower()] = data
    if displayIdentifier in components:
        dataMap["monitors"] = monitorAmount

    return standardizeData(dataMap)


# returns the number of matching fields (so that a general config may be applied if all other fail and exact match is set to false)
def matchConfig(config: str, dataMap: dict, exactMatch=False) -> int:
    if (not path.isfile(config)) or dataMap == None or len(dataMap) == 0: return 0
    matching = 0
    try:
        with open(config) as configRawData :
            data = standardizeData(yaml.safe_load(configRawData))

            if exactMatch and data == dataMap: return len(dataMap)

            # if exactMatch is not specified, it will attempt to find the closest config it can find
            for field in data.keys() :
                if field in dataMap and data[field].lower() == dataMap[field].lower(): 
                    matching += 1
    except e as PermissionError:
        print(f"Config {config} could not be loaded due to unsufficient permissions")

    return matching


# returns a dict containing the paths to the configs found. It loads the configs found in the users home directory
# and the ones defines in TODO config.yml
def loadConfigs() -> set:
    userConfigs = set()
    homeDir = "/home"
    if not path.isdir(homeDir): return userConfigs
    for user in glob.glob(root_dir=homeDir,recursive=False,pathname="*/"):
        configRoot = f"{homeDir}/{user}{userConfigLocation}"
        if not (path.isdir(configRoot)) : continue
        for configName in glob.glob(root_dir=configRoot, pathname=f"*/{configFormat}", recursive=True):
            userConfigs.add(f"{configRoot}/{configName}")

    for rootpath in hardwareLocations :
        for config in glob.glob(root_dir=rootpath, recursive=True, pathname=f"*/{configFormat}"):
                userConfigs.add(f"{rootpath}/{config}")
    
    return userConfigs


def detect() -> str:
    
    startTime = time()
    dataMap = loadComponents(fetchComponents)
    if VERBOSE:
        fetchTime = round((time()-startTime)*1000)
        printVerbose(f"fetching took {fetchTime}ms")
    dataSize = len(dataMap)
    #printVerbose(f"hardware: {dataMap}")

    foundConfigs = loadConfigs()
    printVerbose(f"found {len(foundConfigs)} hardware configs")
    matchMap = {}

    for configPath in foundConfigs:
        matchMap[configPath] = matchConfig(config=configPath, dataMap=dataMap, exactMatch=EXACT_MATCH)
    
    configPath = unknownConfig

    sortedMatches = sorted(matchMap.items(), key=lambda k:k[1], reverse=True)

    if not (len(sortedMatches) == 0 or (EXACT_MATCH and sortedMatches[0][1] != dataSize)):
        bestMatch = sortedMatches[0]
        configPath = path.dirname(bestMatch[0])
        config = trimConfigName(configPath)
        if EXACT_MATCH:
            printVerbose("exact match mode specified")
        if bestMatch[1] == dataSize:
            printVerbose(f"config [{config}] exactly matched !")
        elif not EXACT_MATCH:
            printVerbose(f"found config [{config}] with {bestMatch[1]}/{dataSize} matches")
            
    if VERBOSE:
        totalTime = round((time()-startTime)*1000)
        printVerbose(f"config matching done in {totalTime-fetchTime}ms")
        printVerbose(f"complete config detection done in {totalTime}ms")

    return configPath

def partialDetect() -> str:
    if EXACT_MATCH: 
        detect()
        return

    foundConfigs = loadConfigs()
    printVerbose(f"found {len(foundConfigs)} hardware configs")

    if VERBOSE: startTime = time()
    dataMap = loadComponents(partialFetchComponents)
    if VERBOSE: printVerbose(f"initial fetch done in {round((time()-startTime)*1000)}ms")

    unusedComponents = [""]

    for c in fetchComponents:
        if not c in partialFetchComponents: unusedComponents.append(c)

    refetchAmount = 0
    config = unknownConfig
    
    for i in unusedComponents:
        if len(i) > 0: 
            dataMap.update(loadComponents({i}))
            refetchAmount += 1
        
        matchMap = {}  
        for configPath in foundConfigs:
            matchMap[configPath] = matchConfig(config=configPath, dataMap=dataMap, exactMatch=EXACT_MATCH)
        maxMatches = max(matchMap.values())

        matching = []
        for k,v in matchMap.items():
            if v == maxMatches : matching.append(k)

        if len(matching) <= 1:
            if len(matching) == 0:
                printVerbose("No config found! Using unknown_config instead.")
            else:
                # partial match case
                config = matching[0]
                printVerbose(f"found config [{trimConfigName(config)}] with {matchMap[config]} matches")
            break

    if VERBOSE:
        totalTime = round((time()-startTime)*1000)
        printVerbose(f"config matching done with {refetchAmount} additionnal fetch{'es' if refetchAmount > 1 else ''}")
        printVerbose(f"complete config detection done in {totalTime}ms")

    return config

def getStartupScripts(configDir: str, identifier: str) -> list:
    dirPath = configDir if path.isdir(configDir) else path.dirname(configDir)
    configs = []
    if not path.isdir(dirPath): return configs

    if dirPath[len(dirPath)-1] == '/': dirPath = dirPath[0:len(dirPath)-2]
    genConfigFile = f"{dirPath}/{identifier}"
    if path.isfile(genConfigFile) : configs.append(genConfigFile)

    if identifier == userScriptIdentifier:
        userConfig = path.expanduser(f"~/.config/desktops/{computers}/{trimConfigName(configDir)}/{userScriptIdentifier}")
        if path.isfile(userConfig): configs.append(userConfig)
    
    return configs
    

def apply():
    # the config will be applied as the current user. For any operation requiring root privileges please edit /etc/sddm/Xsetup.
    passedArgument = ""
    for typeArg in argv:
        if typeArg.startswith("--type=") or typeArg.startswith("-t="):
            passedArgument = typeArg[typeArg.index('=')+1:len(typeArg)]
            break
        
    config = None
    scripts = [None]*2

    isRoot = "--root" in argv or "-r" in argv

    def checkSure():
        sure = input("Are you sure this is what you want to do ? (y/N): ").lower() in ["y","yes"]
        if not sure:
            print("User cancelation, aborting sequence.")
            exit()

    if isRoot and os.geteuid() != 0:
        print("Applying root config as a non-root user, this is not an intended usage.")
        checkSure()
    elif (not isRoot) and os.geteuid() == 0:
        print("Root user detected, automatically switching to root mode (--root)")
        isRoot = True

    if isRoot:
        print("applying root startup scripts")
    else:
        print(f"applying user startup scripts for user [{os.getlogin()}]")

    # general config launch script
    configDir = None
    if not path.isfile(currentUsedConfig):
        print("Current used config file not found, please do a config detection first!")
    try:
        with open(currentUsedConfig, "r") as current:
            lines = current.readlines()
            config = lines[0].strip()
            configPath = lines[1].strip()
            configDir = configPath if path.isdir(configPath) else path.dirname(configPath)
    except:
        print(f"Access to current config in {currentUsedConfig} refused : Unsufficient permission")
        exit()
    
    if config == None or len(config) == 0:
            print("No config found!")
            exit(1)

    # user-specific launch script
    scripts = getStartupScripts(configDir, rootScriptIdentifier if isRoot else userScriptIdentifier)
    successfulScripts = 0

    for s in scripts:
        try:
            if not s == None and not len(s) == 0: 
                system(f"{s} {passedArgument}")
                successfulScripts += 1
        except:
            print(f"Permissions to run {s} denied !")
            if isRoot:
                print("Please run this program with root privileges when using --root or -r !")

    if not isRoot:
        try:
            system(f"notify-send \"Desktops\" \"Config [{config}] {'applied' if successfulScripts > 0 else 'FAILED TO BE APPLIED'} !\"")
        except:
            print("notification could not be sent! THIS IS NOT AN ERROR BUT A BAD IMPLEMENTATION")
    print(f"Launch script execution done ({successfulScripts}/{len(scripts)})")

def benchmark():
    compSet = fetchComponents
    components = loadComponents(compSet)
    configs = loadConfigs()
    fetchTimes = {}
    fetchResult = {}
    print(f"Split fetch timings :")
    for identifier in compSet:
        baseTime = time()
        try:
            output = subprocess.check_output(f"fastfetch --pipe -s {identifier} --multithreading", shell=True).decode("UTF-8")
            fetchTimes[identifier] = round((time()-baseTime)*1000)
            fetchResult[identifier] = output
        except subprocess.CalledProcessError :
            print("an error occured when fetching the data !")

    totalTime = sum(fetchTimes.values())
    for k,v in sorted(fetchTimes.items(), key=lambda k:k[1], reverse=False):
        print(f"    - fetched {k} in {v}ms ({round(100*v/totalTime)}%)")
    print(f"{c_green}==> all fetches took {c_orange}{totalTime}ms{c_green} in total{c_default}")
    print(f"{c_blue}\nStarting merged fetch benchmark...{c_default}")
    startTime = time()
    mergedList = loadComponents(fetchComponents)
    mergedFetchTime = round((time()-startTime)*1000)
    print(f"{c_green}==> merged fetch took {c_orange}{mergedFetchTime}ms{c_default}")
    
    print(f"\nHardware : {mergedList}")

def test(benchmarkFetch = True, listConfigs = True, listScripts = True):

    hardware = loadComponents(fetchComponents)
    configs = {}

    if benchmarkFetch: 
        print(f"{c_blue}Starting benchmarking sequence...{c_default}")
        benchmark()
        
    if listConfigs: 
        print(f"{c_blue}\nListing hardware configs...{c_default}")
        configs = {}

        for c in loadConfigs():
            configs[c] = matchConfig(c,hardware)
        
        for c in sorted(configs.items(), key=lambda k:k[1], reverse=True):
            print(f"    - {trimConfigName(c[0])} : {c[0]}")
            print(f"      matches: {c[1]}/{len(hardware)}")
        print(f"{c_green}==> {c_orange}{len(configs)} config{'s' if len(configs) > 1 else ''}{c_green} found{c_default}")
        
        print(f"{c_blue}\nStarting detection benchmark...{c_default}")
        startTime = time()
        detect()
        finalTime = round((time()-startTime)*1000)
        print(f"{c_green}==> normal detection took {c_orange}{finalTime}ms{c_default}")
        startTime = time()
        partialDetect()
        finalTime = round((time()-startTime)*1000)
        print(f"{c_green}==> partial detection took {c_orange}{finalTime}ms{c_default}")
            
    if listScripts: 
        print(f"{c_blue}\nListing startup scripts...{c_default}")
        if len(configs) == 0: configs = loadConfigs()

        for c in configs:
            print(f"    [{trimConfigName(c)}] :")
            print( "        root :")
            for sc in getStartupScripts(c, rootScriptIdentifier):
                print(f"        - {sc}")
            print( "        user :")
            for sc in getStartupScripts(c, userScriptIdentifier):
                print(f"        - {sc}")


def create(name:str):
    dataMap = loadComponents(fetchComponents)
    configPath = f"{defaultHardwareLocation}/{name}"
    if path.exists(configPath):
        print(f"Config [{name}] already exists!\nAborting creation")
        exit()
        
    try:
        os.makedirs(configPath)
    except Exception as e:
        print(f"Config directory creation failed, aborting operation ({repr(e)})")
        exit()

    print(f"config will be created at {configPath}/")
    print(f"this hardware will be used for config:")
    for k in dataMap:
        print(f"    - {k}: {dataMap[k]}")
    # write config
    try:
        with open(f"{configPath}/{configFormat}", "w") as targetFile:
            yaml.safe_dump(data=dataMap,stream=targetFile)
        with open(f"{configPath}/{rootScriptIdentifier}", "w") as targetFile:
            targetFile.write("# root startup script goes here")
            os.chmod(targetFile.name, stat.S_IXUSR | stat.S_IRUSR | stat.S_IWUSR |  stat.S_IROTH | stat.S_IRGRP)
        with open(f"{configPath}/{userScriptIdentifier}", "w") as targetFile:
            targetFile.write("# user startup script goes here")
            os.chmod(targetFile.name, stat.S_IXUSR | stat.S_IRUSR | stat.S_IWUSR |  stat.S_IROTH | stat.S_IRGRP)
    except Exception as e:
        print(f"Config file creation failed, aborting operation ({repr(e)})")
        try:
            shutil.rmtree(configPath)
        except:
            print("Config cleanup failed")



##################################################
#                                                #
#  End of definitions, beginning of script flow  #
#                                                #
##################################################

try:
    hardwareLocations.append(f"{path.dirname(argv[0])}/{computers}")
except:
    print("Current directory not usable for hardware detection")

if len(argv) < 2:
    print("""
    Please specify an action.

    Possible actions are :
        detect
        apply
        create
        test""")
    exit()

if mode ==  detectMode:
        try:
            subprocess.run("fastfetch -v", shell=True, capture_output=True, check=True)
        except subprocess.CalledProcessError:
            print("ERROR : fastfetch not found! please ensure fastfetch is present and available.\nAborting detection!")
            exit()
        
        print("Detecting hardware configuration...")
        config = None
        if PARTIAL_FETCH:
            printVerbose("using partial detection")
            config = partialDetect()
        else:
            config = detect()
        
        if config == None:
            print("No config found! Using unknown_config instead.")
            config = unknownConfig

        print(f"using config [{trimConfigName(config)}]")
        writeConfig(config)

elif mode ==  testMode:
        VERBOSE = True
        if len(argv) == 2 : test()
        else:
            test(
                benchmarkFetch = "--benchmark" in argv or "-b" in argv,
                listConfigs = "--configs" in argv or "-c" in argv,
                listScripts = "--scripts" in argv or "-s" in argv,
            )

elif mode == applyMode:

        if not path.isfile(currentUsedConfig):
            subprocess.run(f"/bin/env python3 {argv[0]} detect")
            if not path.isfile(currentUsedConfig):
                print("Config detection failed, please try again as root!")
                exit()
            
        print("Launching startup script...")
        apply()

elif mode == createMode:
        name = ""
        for a in argv:
            if a.startswith("--name=") or a.startswith("-n="):
                name = a[a.index("=")+1:len(a)]
                break
        if len(name) < 1 and len(argv) >= 3 and len(argv[2]) > 0 and not argv[2].startswith("-"):
            name = argv[2]
        if len(name) > 0:
            print(f"Creating config [{name}]...")
            create(name)
            print("Config creation done!")
        else:
            print("Please input a name for the config, either using --name=<name> or by putting it as the argument after \"create\"")
exit()
